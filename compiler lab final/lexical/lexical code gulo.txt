#include <stdio.h>
#include <string.h>

int isOperatorChar(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' ||
            ch == '%' || ch == '=' || ch == '<' || ch == '>' ||
            ch == '!' || ch == '&' || ch == '|');
}

int main() {
    FILE *fp;
    char code[5000] = {0};

    fp = fopen("code.txt", "r");
    if (!fp) {
        printf(" Could not open file\n");
        return 1;
    }
    fread(code, 1, 4999, fp);
    fclose(fp);

    int operatorCount = 0;

    printf("Operators:\n");
    for (int i = 0; code[i] != '\0';) {
        if (isOperatorChar(code[i])) {
            if ((code[i] == '+' && code[i+1] == '+') ||
                (code[i] == '-' && code[i+1] == '-') ||
                (code[i] == '=' && code[i+1] == '=') ||
                (code[i] == '!' && code[i+1] == '=') ||
                (code[i] == '&' && code[i+1] == '&') ||
                (code[i] == '|' && code[i+1] == '|') ||
                (code[i] == '<' && code[i+1] == '=') ||
                (code[i] == '>' && code[i+1] == '=')) {
                printf("  %c%c\n", code[i], code[i+1]);
                operatorCount++;
                i += 2;
                continue;
            } else {
                printf("  %c\n", code[i]);
                operatorCount++;
            }
        }
        i++;
    }

    printf("Total Operators: %d\n", operatorCount);
    return 0;
}





#include <stdio.h>

int isOperatorChar(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' ||
            ch == '%' || ch == '=' || ch == '<' || ch == '>' ||
            ch == '!' || ch == '&' || ch == '|');
}

int main() {
    char filename[100];
    printf("Enter the filename to analyze: ");
    scanf("%s", filename);

    FILE *fp = fopen(filename, "r");
    if (!fp) {
        printf("❌ Could not open file %s\n", filename);
        return 1;
    }

    char code[5000] = {0};
    fread(code, 1, 4999, fp);
    fclose(fp);

    int operatorCount = 0;

    printf("\nOperators found:\n");
    for (int i = 0; code[i] != '\0'; i++) {
        if (isOperatorChar(code[i])) {
            // check for two-character operators
            if ((code[i] == '+' && code[i+1] == '+') ||
                (code[i] == '-' && code[i+1] == '-') ||
                (code[i] == '=' && code[i+1] == '=') ||
                (code[i] == '!' && code[i+1] == '=') ||
                (code[i] == '&' && code[i+1] == '&') ||
                (code[i] == '|' && code[i+1] == '|') ||
                (code[i] == '<' && code[i+1] == '=') ||
                (code[i] == '>' && code[i+1] == '=')) {
                printf("  %c%c\n", code[i], code[i+1]);
                operatorCount++;
                i++; // skip next char
            } else {
                printf("  %c\n", code[i]);
                operatorCount++;
            }
        }
    }

    printf("\nTotal Operators: %d\n", operatorCount);
    return 0;
}










#include <stdio.h>
#include <string.h>

int isSpecialSymbol(char ch) {
    return (ch == ';' || ch == ',' || ch == '(' || ch == ')' ||
            ch == '{' || ch == '}' || ch == '[' || ch == ']');
}

int main() {
    char filename[100];
    printf("Enter the filename to analyze: ");
    scanf("%s", filename);

    FILE *fp = fopen(filename, "r");
    if (!fp) {
        printf("❌ Could not open file %s\n", filename);
        return 1;
    }

    char code[5000] = {0};
    fread(code, 1, 4999, fp);
    fclose(fp);

    int specialSymbolCount = 0;

    printf("\nSpecial Symbols found:\n");
    for (int i = 0; code[i] != '\0'; i++) {
        if (isSpecialSymbol(code[i])) {
            printf("  %c\n", code[i]);
            specialSymbolCount++;
        }
    }

    printf("\nTotal Special Symbols: %d\n", specialSymbolCount);
    return 0;
}









#include <stdio.h>
#include <string.h>

int isSpecialSymbol(char ch) {
    return (ch == ';' || ch == ',' || ch == '(' || ch == ')' ||
            ch == '{' || ch == '}' || ch == '[' || ch == ']');
}

int main() {
    FILE *fp;
    char code[5000] = {0};

    fp = fopen("code.txt", "r");
    if (!fp) {
        printf("❌ Could not open file\n");
        return 1;
    }
    fread(code, 1, 4999, fp);
    fclose(fp);

    int specialSymbolCount = 0;

    printf("Special Symbols:\n");
    for (int i = 0; code[i] != '\0'; i++) {
        if (isSpecialSymbol(code[i])) {
            printf("  %c\n", code[i]);
            specialSymbolCount++;
        }
    }

    printf("Total Special Symbols: %d\n", specialSymbolCount);
    return 0;
}










#include <stdio.h>
#include <string.h>
#include <ctype.h>

int isKeyword(const char buffer[]) {
    const char* keywords[32] = {
        "auto", "break", "case", "char", "const", "continue", "default",
        "do", "double", "else", "enum", "extern", "float", "for",
        "goto", "if","int", "long", "register","return", "short", "signed", "sizeof",
        "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile",
        "while"
    };
    for (int i = 0; i < 32; i++) {
        if (strcmp(keywords[i], buffer) == 0) return 1;
    }
    return 0;
}

int main() {
    FILE *fp;
    char code[5000] = {0};
    char word[100];

    fp = fopen("code.txt", "r");
    if (!fp) {
        printf("❌ Could not open file\n");
        return 1;
    }
    fread(code, 1, 4999, fp);
    fclose(fp);

    int keywordCount = 0;
    int len = strlen(code);
    int idx = 0, wordIdx = 0;

    printf("Keywords:\n");
    while (idx <= len) {
        char ch = code[idx];
        if (isalnum(ch) || ch == '_') {
            word[wordIdx++] = ch;
        } else {
            if (wordIdx > 0) {
                word[wordIdx] = '\0';
                if (isKeyword(word)) {
                    printf("  %s\n", word);
                    keywordCount++;
                }
                wordIdx = 0;
            }
        }
        idx++;
    }

    printf("Total Keywords: %d\n", keywordCount);
    return 0;
}








#include <stdio.h>
#include <string.h>
#include <ctype.h>

int isKeyword(const char buffer[]) {
    const char* keywords[32] = {
        "auto", "break", "case", "char", "const", "continue", "default",
        "do", "double", "else", "enum", "extern", "float", "for",
        "goto", "if","int", "long", "register","return", "short", "signed", "sizeof",
        "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile",
        "while"
    };
    for (int i = 0; i < 32; i++) {
        if (strcmp(keywords[i], buffer) == 0) return 1;
    }
    return 0;
}

int main() {
    char filename[100];
    printf("Enter the filename to analyze: ");
    scanf("%s", filename);

    FILE *fp = fopen(filename, "r");
    if (!fp) {
        printf("❌ Could not open file %s\n", filename);
        return 1;
    }

    char code[5000] = {0};
    fread(code, 1, 4999, fp);
    fclose(fp);

    char word[100];
    int keywordCount = 0;
    int len = strlen(code);
    int idx = 0, wordIdx = 0;

    printf("\nKeywords found:\n");
    while (idx <= len) {
        char ch = code[idx];
        if (isalnum(ch) || ch == '_') {
            word[wordIdx++] = ch;
        } else {
            if (wordIdx > 0) {
                word[wordIdx] = '\0';
                if (isKeyword(word)) {
                    printf("  %s\n", word);
                    keywordCount++;
                }
                wordIdx = 0;
            }
        }
        idx++;
    }

    printf("\nTotal Keywords: %d\n", keywordCount);
    return 0;
}









#include <stdio.h>
#include <string.h>
#include <ctype.h>

int isKeyword(const char buffer[]) {
    const char* keywords[32] = {
        "auto", "break", "case", "char", "const", "continue", "default",
        "do", "double", "else", "enum", "extern", "float", "for",
        "goto", "if","int", "long", "register","return", "short", "signed", "sizeof",
        "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile",
        "while"
    };
    for (int i = 0; i < 32; i++) {
        if (strcmp(keywords[i], buffer) == 0) return 1;
    }
    return 0;
}

int main() {
    FILE *fp;
    char code[5000] = {0};
    char word[100];

    fp = fopen("code.txt", "r");
    if (!fp) {
        printf("❌ Could not open file\n");
        return 1;
    }
    fread(code, 1, 4999, fp);
    fclose(fp);

    int identifierCount = 0;
    int len = strlen(code);
    int idx = 0, wordIdx = 0;

    printf("Identifiers:\n");
    while (idx <= len) {
        char ch = code[idx];
        if (isalnum(ch) || ch == '_') {
            word[wordIdx++] = ch;
        } else {
            if (wordIdx > 0) {
                word[wordIdx] = '\0';
                if (!isKeyword(word)) {
                    printf("  %s\n", word);
                    identifierCount++;
                }
                wordIdx = 0;
            }
        }
        idx++;
    }

    printf("Total Identifiers: %d\n", identifierCount);
    return 0;
}












#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

int isOperatorChar(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' ||
            ch == '%' || ch == '=' || ch == '<' || ch == '>' ||
            ch == '!' || ch == '&' || ch == '|');
}

int isSpecialSymbol(char ch) {
    return (ch == ';' || ch == ',' || ch == '(' || ch == ')' ||
            ch == '{' || ch == '}' || ch == '[' || ch == ']');
}

int isKeyword(const char buffer[]) {
    const char* keywords[32] = {
        "auto", "break", "case", "char", "const", "continue", "default",
        "do", "double", "else", "enum", "extern", "float", "for",
        "goto", "if","int", "long", "register","return", "short", "signed", "sizeof",
        "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile",
        "while"
    };
    for (int i = 0; i < 32; i++) {
        if (strcmp(keywords[i], buffer) == 0) {
            return 1;
        }
    }
    return 0;
}

int main() {
    FILE *fp;
    char code[5000] = {0};
    char word[100];

    fp = fopen("code.txt", "r");
    if (fp == NULL) {
        printf("❌ Error: Could not open code.txt\n");
        return 1;
    }

    fread(code, sizeof(char), 4999, fp);
    code[4999] = '\0';
    fclose(fp);

    int keywordCount = 0, identifierCount = 0;
    int operatorCount = 0, specialSymbolCount = 0;

    printf("Operators:\n");
    for (int i = 0; code[i] != '\0';) {
        if (isOperatorChar(code[i])) {
            if ((code[i] == '+' && code[i+1] == '+') ||
                (code[i] == '-' && code[i+1] == '-') ||
                (code[i] == '=' && code[i+1] == '=') ||
                (code[i] == '!' && code[i+1] == '=') ||
                (code[i] == '&' && code[i+1] == '&') ||
                (code[i] == '|' && code[i+1] == '|') ||
                (code[i] == '<' && code[i+1] == '=') ||
                (code[i] == '>' && code[i+1] == '=')) {
                printf("  %c%c\n", code[i], code[i+1]);
                operatorCount++;
                i += 2;
                continue;
            } else {
                printf("  %c\n", code[i]);
                operatorCount++;
                i++;
                continue;
            }
        }
        i++;
    }

    printf("\nSpecial Symbols:\n");
    for (int i = 0; code[i] != '\0'; i++) {
        if (isSpecialSymbol(code[i])) {
            printf("  %c\n", code[i]);
            specialSymbolCount++;
        }
    }

    printf("\nKeywords and Identifiers:\n");
    int len = strlen(code);
    int idx = 0;
    int wordIdx = 0;

    while (idx <= len) {
        char ch = code[idx];

        if (isalnum(ch) || ch == '_') {
            word[wordIdx++] = ch;
        } else {
            if (wordIdx > 0) {
                word[wordIdx] = '\0';

                if (isKeyword(word)) {
                    printf("  \"%s\" is a Keyword\n", word);
                    keywordCount++;
                } else {
                    printf("  \"%s\" is an Identifier\n", word);
                    identifierCount++;
                }
                wordIdx = 0;
            }
        }
        idx++;
    }

    printf("\nSummary:\n");
    printf("Total Operators: %d\n", operatorCount);
    printf("Total Special Symbols: %d\n", specialSymbolCount);
    printf("Total Keywords: %d\n", keywordCount);
    printf("Total Identifiers: %d\n", identifierCount);

    int totalTokens = keywordCount + identifierCount + specialSymbolCount + operatorCount;
    printf("Total Tokens (Keywords + Identifiers + Special Symbols + Operators): %d\n", totalTokens);

    return 0;
}








#include <stdio.h>
#include <string.h>
#include <ctype.h>

int isOperatorChar(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' ||
            ch == '%' || ch == '=' || ch == '<' || ch == '>' ||
            ch == '!' || ch == '&' || ch == '|');
}

int isSpecialSymbol(char ch) {
    return (ch == ';' || ch == ',' || ch == '(' || ch == ')' ||
            ch == '{' || ch == '}' || ch == '[' || ch == ']');
}

int isKeyword(const char buffer[]) {
    const char* keywords[32] = {
        "auto", "break", "case", "char", "const", "continue", "default",
        "do", "double", "else", "enum", "extern", "float", "for",
        "goto", "if","int", "long", "register","return", "short", "signed", "sizeof",
        "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile",
        "while"
    };
    for (int i = 0; i < 32; i++) {
        if (strcmp(keywords[i], buffer) == 0) return 1;
    }
    return 0;
}

int main() {
    char filename[100];
    printf("Enter the filename to analyze: ");
    scanf("%s", filename);

    FILE *fp = fopen(filename, "r");
    if (!fp) {
        printf("❌ Could not open file %s\n", filename);
        return 1;
    }

    char code[5000] = {0};
    fread(code, 1, 4999, fp);
    fclose(fp);

    int keywordCount = 0, identifierCount = 0;
    int operatorCount = 0, specialSymbolCount = 0;
    char word[100];

    // Operators
    printf("\nOperators:\n");
    for (int i = 0; code[i] != '\0';) {
        if (isOperatorChar(code[i])) {
            if ((code[i] == '+' && code[i+1] == '+') ||
                (code[i] == '-' && code[i+1] == '-') ||
                (code[i] == '=' && code[i+1] == '=') ||
                (code[i] == '!' && code[i+1] == '=') ||
                (code[i] == '&' && code[i+1] == '&') ||
                (code[i] == '|' && code[i+1] == '|') ||
                (code[i] == '<' && code[i+1] == '=') ||
                (code[i] == '>' && code[i+1] == '=')) {
                printf("  %c%c\n", code[i], code[i+1]);
                operatorCount++;
                i += 2;
                continue;
            } else {
                printf("  %c\n", code[i]);
                operatorCount++;
                i++;
                continue;
            }
        }
        i++;
    }

    // Special Symbols
    printf("\nSpecial Symbols:\n");
    for (int i = 0; code[i] != '\0'; i++) {
        if (isSpecialSymbol(code[i])) {
            printf("  %c\n", code[i]);
            specialSymbolCount++;
        }
    }

    // Keywords and Identifiers
    printf("\nKeywords and Identifiers:\n");
    int len = strlen(code);
    int idx = 0, wordIdx = 0;

    while (idx <= len) {
        char ch = code[idx];
        if (isalnum(ch) || ch == '_') {
            word[wordIdx++] = ch;
        } else {
            if (wordIdx > 0) {
                word[wordIdx] = '\0';
                if (isKeyword(word)) {
                    printf("  \"%s\" is a Keyword\n", word);
                    keywordCount++;
                } else {
                    printf("  \"%s\" is an Identifier\n", word);
                    identifierCount++;
                }
                wordIdx = 0;
            }
        }
        idx++;
    }

    // Summary
    printf("\nSummary:\n");
    printf("Total Operators: %d\n", operatorCount);
    printf("Total Special Symbols: %d\n", specialSymbolCount);
    printf("Total Keywords: %d\n", keywordCount);
    printf("Total Identifiers: %d\n", identifierCount);

    int totalTokens = keywordCount + identifierCount + specialSymbolCount + operatorCount;
    printf("Total Tokens (Keywords + Identifiers + Special Symbols + Operators): %d\n", totalTokens);

    return 0;
}















//file read
#include<stdio.h>
#include <string.h>
int main()
{
    FILE *x;
    char ch;


    x = fopen("test3_forread.txt","r");

    while(!feof(x))
    {
        ch=fgetc(x);
        printf("%c",ch);
    }

    fclose(x);//close file

}






#include <stdio.h>
#include <string.h>
#include <ctype.h>

int isOperatorChar(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' ||
            ch == '%' || ch == '=' || ch == '<' || ch == '>' ||
            ch == '!' || ch == '&' || ch == '|');
}

int isSpecialSymbol(char ch) {
    return (ch == ';' || ch == ',' || ch == '(' || ch == ')' ||
            ch == '{' || ch == '}' || ch == '[' || ch == ']');
}

int isKeyword(const char buffer[]) {
    const char* keywords[32] = {
        "auto", "break", "case", "char", "const", "continue", "default",
        "do", "double", "else", "enum", "extern", "float", "for",
        "goto", "if","int", "long", "register","return", "short", "signed", "sizeof",
        "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile",
        "while"
    };
    for (int i = 0; i < 32; i++) {
        if (strcmp(keywords[i], buffer) == 0) return 1;
    }
    return 0;
}

int main() {
    char filename[100];
    printf("Enter the filename to analyze: ");
    scanf("%s", filename);

    FILE *fp = fopen(filename, "r");
    if (!fp) {
        printf("❌ Could not open file %s\n", filename);
        return 1;
    }

    char code[5000] = {0};
    fread(code, 1, 4999, fp);
    fclose(fp);

    char word[100];

    // Operators
    printf("\nOperators:\n");
    for (int i = 0; code[i] != '\0';) {
        if (isOperatorChar(code[i])) {
            if ((code[i] == '+' && code[i+1] == '+') ||
                (code[i] == '-' && code[i+1] == '-') ||
                (code[i] == '=' && code[i+1] == '=') ||
                (code[i] == '!' && code[i+1] == '=') ||
                (code[i] == '&' && code[i+1] == '&') ||
                (code[i] == '|' && code[i+1] == '|') ||
                (code[i] == '<' && code[i+1] == '=') ||
                (code[i] == '>' && code[i+1] == '=')) {
                printf("  %c%c\n", code[i], code[i+1]);
                i += 2;
                continue;
            } else {
                printf("  %c\n", code[i]);
                i++;
                continue;
            }
        }
        i++;
    }

    // Special Symbols
    printf("\nSpecial Symbols:\n");
    for (int i = 0; code[i] != '\0'; i++) {
        if (isSpecialSymbol(code[i])) {
            printf("  %c\n", code[i]);
        }
    }

    // Keywords and Identifiers
    printf("\nKeywords and Identifiers:\n");
    int len = strlen(code);
    int idx = 0, wordIdx = 0;

    while (idx <= len) {
        char ch = code[idx];
        if (isalnum(ch) || ch == '_') {
            word[wordIdx++] = ch;
        } else {
            if (wordIdx > 0) {
                word[wordIdx] = '\0';
                if (isKeyword(word)) {
                    printf("  \"%s\" is a Keyword\n", word);
                } else {
                    printf("  \"%s\" is an Identifier\n", word);
                }
                wordIdx = 0;
            }
        }
        idx++;
    }

    return 0;
}





